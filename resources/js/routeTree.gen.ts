/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from "@tanstack/react-router";

// Import Routes

import { Route as rootRoute } from "./routes/__root";
import { Route as LoginImport } from "./routes/login";
import { Route as AppImport } from "./routes/app";

// Create Virtual Routes

const RegisterLazyImport = createFileRoute("/register")();
const AboutLazyImport = createFileRoute("/about")();
const IndexLazyImport = createFileRoute("/")();

// Create/Update Routes

const RegisterLazyRoute = RegisterLazyImport.update({
    id: "/register",
    path: "/register",
    getParentRoute: () => rootRoute,
} as any).lazy(() => import("./routes/register.lazy").then((d) => d.Route));

const AboutLazyRoute = AboutLazyImport.update({
    id: "/about",
    path: "/about",
    getParentRoute: () => rootRoute,
} as any).lazy(() => import("./routes/about.lazy").then((d) => d.Route));

const LoginRoute = LoginImport.update({
    id: "/login",
    path: "/login",
    getParentRoute: () => rootRoute,
} as any);

const AppRoute = AppImport.update({
    id: "/app",
    path: "/app",
    getParentRoute: () => rootRoute,
} as any);

const IndexLazyRoute = IndexLazyImport.update({
    id: "/",
    path: "/",
    getParentRoute: () => rootRoute,
} as any).lazy(() => import("./routes/index.lazy").then((d) => d.Route));

// Populate the FileRoutesByPath interface

declare module "@tanstack/react-router" {
    interface FileRoutesByPath {
        "/": {
            id: "/";
            path: "/";
            fullPath: "/";
            preLoaderRoute: typeof IndexLazyImport;
            parentRoute: typeof rootRoute;
        };
        "/app": {
            id: "/app";
            path: "/app";
            fullPath: "/app";
            preLoaderRoute: typeof AppImport;
            parentRoute: typeof rootRoute;
        };
        "/login": {
            id: "/login";
            path: "/login";
            fullPath: "/login";
            preLoaderRoute: typeof LoginImport;
            parentRoute: typeof rootRoute;
        };
        "/about": {
            id: "/about";
            path: "/about";
            fullPath: "/about";
            preLoaderRoute: typeof AboutLazyImport;
            parentRoute: typeof rootRoute;
        };
        "/register": {
            id: "/register";
            path: "/register";
            fullPath: "/register";
            preLoaderRoute: typeof RegisterLazyImport;
            parentRoute: typeof rootRoute;
        };
    }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
    "/": typeof IndexLazyRoute;
    "/app": typeof AppRoute;
    "/login": typeof LoginRoute;
    "/about": typeof AboutLazyRoute;
    "/register": typeof RegisterLazyRoute;
}

export interface FileRoutesByTo {
    "/": typeof IndexLazyRoute;
    "/app": typeof AppRoute;
    "/login": typeof LoginRoute;
    "/about": typeof AboutLazyRoute;
    "/register": typeof RegisterLazyRoute;
}

export interface FileRoutesById {
    __root__: typeof rootRoute;
    "/": typeof IndexLazyRoute;
    "/app": typeof AppRoute;
    "/login": typeof LoginRoute;
    "/about": typeof AboutLazyRoute;
    "/register": typeof RegisterLazyRoute;
}

export interface FileRouteTypes {
    fileRoutesByFullPath: FileRoutesByFullPath;
    fullPaths: "/" | "/app" | "/login" | "/about" | "/register";
    fileRoutesByTo: FileRoutesByTo;
    to: "/" | "/app" | "/login" | "/about" | "/register";
    id: "__root__" | "/" | "/app" | "/login" | "/about" | "/register";
    fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
    IndexLazyRoute: typeof IndexLazyRoute;
    AppRoute: typeof AppRoute;
    LoginRoute: typeof LoginRoute;
    AboutLazyRoute: typeof AboutLazyRoute;
    RegisterLazyRoute: typeof RegisterLazyRoute;
}

const rootRouteChildren: RootRouteChildren = {
    IndexLazyRoute: IndexLazyRoute,
    AppRoute: AppRoute,
    LoginRoute: LoginRoute,
    AboutLazyRoute: AboutLazyRoute,
    RegisterLazyRoute: RegisterLazyRoute,
};

export const routeTree = rootRoute
    ._addFileChildren(rootRouteChildren)
    ._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/app",
        "/login",
        "/about",
        "/register"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/app": {
      "filePath": "app.tsx"
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/about": {
      "filePath": "about.lazy.tsx"
    },
    "/register": {
      "filePath": "register.lazy.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
