/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from "@tanstack/react-router";

// Import Routes

import { Route as rootRoute } from "./routes/__root";
import { Route as LoginImport } from "./routes/login";
import { Route as AuthImport } from "./routes/_auth";
import { Route as AuthSitesImport } from "./routes/_auth.sites";
import { Route as AuthSettingsImport } from "./routes/_auth.settings";
import { Route as AuthEquipmentImport } from "./routes/_auth.equipment";
import { Route as AuthComponentsImport } from "./routes/_auth.components";
import { Route as AuthAppImport } from "./routes/_auth.app";
import { Route as AuthInspectionsReportsImport } from "./routes/_auth.inspections.reports";
import { Route as AuthInspectionsHistoryImport } from "./routes/_auth.inspections.history";
import { Route as AuthInspectionsCreateImport } from "./routes/_auth.inspections.create";

// Create Virtual Routes

const RegisterLazyImport = createFileRoute("/register")();
const AboutLazyImport = createFileRoute("/about")();
const IndexLazyImport = createFileRoute("/")();

// Create/Update Routes

const RegisterLazyRoute = RegisterLazyImport.update({
    id: "/register",
    path: "/register",
    getParentRoute: () => rootRoute,
} as any).lazy(() => import("./routes/register.lazy").then((d) => d.Route));

const AboutLazyRoute = AboutLazyImport.update({
    id: "/about",
    path: "/about",
    getParentRoute: () => rootRoute,
} as any).lazy(() => import("./routes/about.lazy").then((d) => d.Route));

const LoginRoute = LoginImport.update({
    id: "/login",
    path: "/login",
    getParentRoute: () => rootRoute,
} as any);

const AuthRoute = AuthImport.update({
    id: "/_auth",
    getParentRoute: () => rootRoute,
} as any);

const IndexLazyRoute = IndexLazyImport.update({
    id: "/",
    path: "/",
    getParentRoute: () => rootRoute,
} as any).lazy(() => import("./routes/index.lazy").then((d) => d.Route));

const AuthSitesRoute = AuthSitesImport.update({
    id: "/sites",
    path: "/sites",
    getParentRoute: () => AuthRoute,
} as any);

const AuthSettingsRoute = AuthSettingsImport.update({
    id: "/settings",
    path: "/settings",
    getParentRoute: () => AuthRoute,
} as any);

const AuthEquipmentRoute = AuthEquipmentImport.update({
    id: "/equipment",
    path: "/equipment",
    getParentRoute: () => AuthRoute,
} as any);

const AuthComponentsRoute = AuthComponentsImport.update({
    id: "/components",
    path: "/components",
    getParentRoute: () => AuthRoute,
} as any);

const AuthAppRoute = AuthAppImport.update({
    id: "/app",
    path: "/app",
    getParentRoute: () => AuthRoute,
} as any);

const AuthInspectionsReportsRoute = AuthInspectionsReportsImport.update({
    id: "/inspections/reports",
    path: "/inspections/reports",
    getParentRoute: () => AuthRoute,
} as any);

const AuthInspectionsHistoryRoute = AuthInspectionsHistoryImport.update({
    id: "/inspections/history",
    path: "/inspections/history",
    getParentRoute: () => AuthRoute,
} as any);

const AuthInspectionsCreateRoute = AuthInspectionsCreateImport.update({
    id: "/inspections/create",
    path: "/inspections/create",
    getParentRoute: () => AuthRoute,
} as any);

// Populate the FileRoutesByPath interface

declare module "@tanstack/react-router" {
    interface FileRoutesByPath {
        "/": {
            id: "/";
            path: "/";
            fullPath: "/";
            preLoaderRoute: typeof IndexLazyImport;
            parentRoute: typeof rootRoute;
        };
        "/_auth": {
            id: "/_auth";
            path: "";
            fullPath: "";
            preLoaderRoute: typeof AuthImport;
            parentRoute: typeof rootRoute;
        };
        "/login": {
            id: "/login";
            path: "/login";
            fullPath: "/login";
            preLoaderRoute: typeof LoginImport;
            parentRoute: typeof rootRoute;
        };
        "/about": {
            id: "/about";
            path: "/about";
            fullPath: "/about";
            preLoaderRoute: typeof AboutLazyImport;
            parentRoute: typeof rootRoute;
        };
        "/register": {
            id: "/register";
            path: "/register";
            fullPath: "/register";
            preLoaderRoute: typeof RegisterLazyImport;
            parentRoute: typeof rootRoute;
        };
        "/_auth/app": {
            id: "/_auth/app";
            path: "/app";
            fullPath: "/app";
            preLoaderRoute: typeof AuthAppImport;
            parentRoute: typeof AuthImport;
        };
        "/_auth/components": {
            id: "/_auth/components";
            path: "/components";
            fullPath: "/components";
            preLoaderRoute: typeof AuthComponentsImport;
            parentRoute: typeof AuthImport;
        };
        "/_auth/equipment": {
            id: "/_auth/equipment";
            path: "/equipment";
            fullPath: "/equipment";
            preLoaderRoute: typeof AuthEquipmentImport;
            parentRoute: typeof AuthImport;
        };
        "/_auth/settings": {
            id: "/_auth/settings";
            path: "/settings";
            fullPath: "/settings";
            preLoaderRoute: typeof AuthSettingsImport;
            parentRoute: typeof AuthImport;
        };
        "/_auth/sites": {
            id: "/_auth/sites";
            path: "/sites";
            fullPath: "/sites";
            preLoaderRoute: typeof AuthSitesImport;
            parentRoute: typeof AuthImport;
        };
        "/_auth/inspections/create": {
            id: "/_auth/inspections/create";
            path: "/inspections/create";
            fullPath: "/inspections/create";
            preLoaderRoute: typeof AuthInspectionsCreateImport;
            parentRoute: typeof AuthImport;
        };
        "/_auth/inspections/history": {
            id: "/_auth/inspections/history";
            path: "/inspections/history";
            fullPath: "/inspections/history";
            preLoaderRoute: typeof AuthInspectionsHistoryImport;
            parentRoute: typeof AuthImport;
        };
        "/_auth/inspections/reports": {
            id: "/_auth/inspections/reports";
            path: "/inspections/reports";
            fullPath: "/inspections/reports";
            preLoaderRoute: typeof AuthInspectionsReportsImport;
            parentRoute: typeof AuthImport;
        };
    }
}

// Create and export the route tree

interface AuthRouteChildren {
    AuthAppRoute: typeof AuthAppRoute;
    AuthComponentsRoute: typeof AuthComponentsRoute;
    AuthEquipmentRoute: typeof AuthEquipmentRoute;
    AuthSettingsRoute: typeof AuthSettingsRoute;
    AuthSitesRoute: typeof AuthSitesRoute;
    AuthInspectionsCreateRoute: typeof AuthInspectionsCreateRoute;
    AuthInspectionsHistoryRoute: typeof AuthInspectionsHistoryRoute;
    AuthInspectionsReportsRoute: typeof AuthInspectionsReportsRoute;
}

const AuthRouteChildren: AuthRouteChildren = {
    AuthAppRoute: AuthAppRoute,
    AuthComponentsRoute: AuthComponentsRoute,
    AuthEquipmentRoute: AuthEquipmentRoute,
    AuthSettingsRoute: AuthSettingsRoute,
    AuthSitesRoute: AuthSitesRoute,
    AuthInspectionsCreateRoute: AuthInspectionsCreateRoute,
    AuthInspectionsHistoryRoute: AuthInspectionsHistoryRoute,
    AuthInspectionsReportsRoute: AuthInspectionsReportsRoute,
};

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren);

export interface FileRoutesByFullPath {
    "/": typeof IndexLazyRoute;
    "": typeof AuthRouteWithChildren;
    "/login": typeof LoginRoute;
    "/about": typeof AboutLazyRoute;
    "/register": typeof RegisterLazyRoute;
    "/app": typeof AuthAppRoute;
    "/components": typeof AuthComponentsRoute;
    "/equipment": typeof AuthEquipmentRoute;
    "/settings": typeof AuthSettingsRoute;
    "/sites": typeof AuthSitesRoute;
    "/inspections/create": typeof AuthInspectionsCreateRoute;
    "/inspections/history": typeof AuthInspectionsHistoryRoute;
    "/inspections/reports": typeof AuthInspectionsReportsRoute;
}

export interface FileRoutesByTo {
    "/": typeof IndexLazyRoute;
    "": typeof AuthRouteWithChildren;
    "/login": typeof LoginRoute;
    "/about": typeof AboutLazyRoute;
    "/register": typeof RegisterLazyRoute;
    "/app": typeof AuthAppRoute;
    "/components": typeof AuthComponentsRoute;
    "/equipment": typeof AuthEquipmentRoute;
    "/settings": typeof AuthSettingsRoute;
    "/sites": typeof AuthSitesRoute;
    "/inspections/create": typeof AuthInspectionsCreateRoute;
    "/inspections/history": typeof AuthInspectionsHistoryRoute;
    "/inspections/reports": typeof AuthInspectionsReportsRoute;
}

export interface FileRoutesById {
    __root__: typeof rootRoute;
    "/": typeof IndexLazyRoute;
    "/_auth": typeof AuthRouteWithChildren;
    "/login": typeof LoginRoute;
    "/about": typeof AboutLazyRoute;
    "/register": typeof RegisterLazyRoute;
    "/_auth/app": typeof AuthAppRoute;
    "/_auth/components": typeof AuthComponentsRoute;
    "/_auth/equipment": typeof AuthEquipmentRoute;
    "/_auth/settings": typeof AuthSettingsRoute;
    "/_auth/sites": typeof AuthSitesRoute;
    "/_auth/inspections/create": typeof AuthInspectionsCreateRoute;
    "/_auth/inspections/history": typeof AuthInspectionsHistoryRoute;
    "/_auth/inspections/reports": typeof AuthInspectionsReportsRoute;
}

export interface FileRouteTypes {
    fileRoutesByFullPath: FileRoutesByFullPath;
    fullPaths:
        | "/"
        | ""
        | "/login"
        | "/about"
        | "/register"
        | "/app"
        | "/components"
        | "/equipment"
        | "/settings"
        | "/sites"
        | "/inspections/create"
        | "/inspections/history"
        | "/inspections/reports";
    fileRoutesByTo: FileRoutesByTo;
    to:
        | "/"
        | ""
        | "/login"
        | "/about"
        | "/register"
        | "/app"
        | "/components"
        | "/equipment"
        | "/settings"
        | "/sites"
        | "/inspections/create"
        | "/inspections/history"
        | "/inspections/reports";
    id:
        | "__root__"
        | "/"
        | "/_auth"
        | "/login"
        | "/about"
        | "/register"
        | "/_auth/app"
        | "/_auth/components"
        | "/_auth/equipment"
        | "/_auth/settings"
        | "/_auth/sites"
        | "/_auth/inspections/create"
        | "/_auth/inspections/history"
        | "/_auth/inspections/reports";
    fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
    IndexLazyRoute: typeof IndexLazyRoute;
    AuthRoute: typeof AuthRouteWithChildren;
    LoginRoute: typeof LoginRoute;
    AboutLazyRoute: typeof AboutLazyRoute;
    RegisterLazyRoute: typeof RegisterLazyRoute;
}

const rootRouteChildren: RootRouteChildren = {
    IndexLazyRoute: IndexLazyRoute,
    AuthRoute: AuthRouteWithChildren,
    LoginRoute: LoginRoute,
    AboutLazyRoute: AboutLazyRoute,
    RegisterLazyRoute: RegisterLazyRoute,
};

export const routeTree = rootRoute
    ._addFileChildren(rootRouteChildren)
    ._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_auth",
        "/login",
        "/about",
        "/register"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/_auth": {
      "filePath": "_auth.tsx",
      "children": [
        "/_auth/app",
        "/_auth/components",
        "/_auth/equipment",
        "/_auth/settings",
        "/_auth/sites",
        "/_auth/inspections/create",
        "/_auth/inspections/history",
        "/_auth/inspections/reports"
      ]
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/about": {
      "filePath": "about.lazy.tsx"
    },
    "/register": {
      "filePath": "register.lazy.tsx"
    },
    "/_auth/app": {
      "filePath": "_auth.app.tsx",
      "parent": "/_auth"
    },
    "/_auth/components": {
      "filePath": "_auth.components.tsx",
      "parent": "/_auth"
    },
    "/_auth/equipment": {
      "filePath": "_auth.equipment.tsx",
      "parent": "/_auth"
    },
    "/_auth/settings": {
      "filePath": "_auth.settings.tsx",
      "parent": "/_auth"
    },
    "/_auth/sites": {
      "filePath": "_auth.sites.tsx",
      "parent": "/_auth"
    },
    "/_auth/inspections/create": {
      "filePath": "_auth.inspections.create.tsx",
      "parent": "/_auth"
    },
    "/_auth/inspections/history": {
      "filePath": "_auth.inspections.history.tsx",
      "parent": "/_auth"
    },
    "/_auth/inspections/reports": {
      "filePath": "_auth.inspections.reports.tsx",
      "parent": "/_auth"
    }
  }
}
ROUTE_MANIFEST_END */
